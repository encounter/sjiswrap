name: Build

on:
  push:
    paths-ignore:
      - '*.md'
      - 'LICENSE*'
  pull_request:

env:
  CARGO_BIN_NAME: sjiswrap
  CARGO_TARGET_DIR: target

jobs:
  check:
    name: Check
    runs-on: windows-latest
    env:
      RUSTFLAGS: -D warnings
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@nightly-2023-09-18
        with:
          components: clippy
      - name: Cargo check
        run: cargo check --features debug --all-targets
      - name: Cargo clippy
        run: cargo clippy --features debug --all-targets

  fmt:
    name: Format
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Rust toolchain
        # We use nightly options in rustfmt.toml
        uses: dtolnay/rust-toolchain@nightly-2023-09-18
        with:
          components: rustfmt
      - name: Cargo fmt
        run: cargo fmt --all --check

  build:
    name: Build
    strategy:
      matrix:
        include:
          - platform: windows-latest
            target: i686-pc-windows-msvc
            name: windows-x86
      fail-fast: false
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@nightly-2023-09-18
        with:
          components: rust-src
          targets: ${{ matrix.target }}
      - name: Cargo build
        run: cargo build --release --features nightly --target ${{ matrix.target }} --bin ${{ env.CARGO_BIN_NAME }} -Z build-std=std,panic_abort
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.name }}
          path: |
            ${{ env.CARGO_TARGET_DIR }}/release/${{ env.CARGO_BIN_NAME }}
            ${{ env.CARGO_TARGET_DIR }}/release/${{ env.CARGO_BIN_NAME }}.exe
            ${{ env.CARGO_TARGET_DIR }}/${{ matrix.target }}/release/${{ env.CARGO_BIN_NAME }}
            ${{ env.CARGO_TARGET_DIR }}/${{ matrix.target }}/release/${{ env.CARGO_BIN_NAME }}.exe
          if-no-files-found: error

  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Rename artifacts
        working-directory: artifacts
        run: |
          mkdir ../out
          for i in */*/release/$CARGO_BIN_NAME*; do
            mv "$i" "../out/$(sed -E "s/([^/]+)\/[^/]+\/release\/($CARGO_BIN_NAME)/\2-\1/" <<< "$i")"
          done
          ls -R ../out
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: out/*
